
> requirements:

1.
{
	type: 'category',
	name: "Smart Objects",
	elements: [
		
		// define vpl elements which blocks to be included
		{
			name: { domainElem: 'SmartObject' }
			type: 'category',
			elements: [ // select which are the elements are included
				{
					name: 'getProperty',
					type: 'Element',
					values: 'xml includes static values of the item'
				}
			]
			or could be "ALL"
		},
		// list of all domain element instances of a specific element
		{
			name: { domainElem: 'SmartObject', item: 'getProperty' }
		}
	]

{
	name: 'Smart Objects',
	type: 'category',
	colour: 232, (optional),
	elements: [
		{
			name: { domainElem: 'SmartObject' },
			type: 'category',
			colour: { domainElem: 'SmartObject' },
			elements: [
				// selection of the elements
			]
		}
	]
},
{
	type: 'separator',
	sep: sep: 32
},
{
	name: 'getProperty', // find static?
	type: 'block',
	variables: []
},
{
	name: { domainElem: 'SmartObject', item:'getProperty' }, // find static?
	type: 'element',
	variables: []
},
{
	type: 'label',
	text: 'text of the label'
	style: {
		name: ''
	}
},
{
	type: 'button'
}

// create xml static with injections
// means:
//

{
	toolbox:'<xml>' +
				'<category ></category>' +
				'<sep></sep>' +
				'<category ></category>' +
			'</xml>'
;


one mission could refer only selected elements (one or more) or all elements

in case of one element -> ok one callback is called to notify

- in case of more elements?


- step 1: fix callbacks and ref handling of the domain elements:

> domainElement has to collect info for the missions and which are the elements
  that are referenced it controls all the callbacks of the mission...

  bookFunc in the elements means addMission means -> call parent to 

_______________________________________________________________________________

- testing process:

steps:
1 connect Blockly instance with the start page and call initialize of the IDE
2 use general toolbox in the dummy blockly of the intro
3 postCreate new smart object from the ViSma -> define button to press for the
  changes, add btns to edit the areas if needed
4 postCreate new task
5 postDelete new task

- Development: Loading existing projects
    System have to reload the created VPL Domain Elements, and their items

    1. each domain element data exist in the project has to be loaded
    2. 

-------------------------------------------------------------------------------

DomainElements = [
	{
		name: 'example',
		blocklyElems: [
			{
				name: 'getValue',
				blockDef: (data) => {/* def constructions depends on data */},
				codeGen: (data) => {/* def code generation based on data */},
				debugGen: (data) => {/* def code generation based on data */}
			}
		],
		flowElems: [
			{
				name: 'observer',
				nodeDef: (data) => { /* instantiates the new node of the VPL flow editor */ },
				codeGen: (data) => {},
				debugGen: (data) => {}
			}
		],
		guiElems: [
			{
				name: 'so_handling_ui_component',
				microuiDef: (data) => {}
			}
		],
		signals: [ // specific mission vpl editor that constructs domainElement sends the signals
			{ signal: 'create-example', action: 'onCreate' },
			...
		]
	}
];

DomainMissions = [
	{
		name: 'SmartObjectTask',
		items: [
			// refer the elems exist in the toolbox of the VPL Editor that handles the specific mission
		]
	}
];

// One mission is able to be domain element in order to be handled by elems
// e.g. mission: 'task-automations' is Blockly instance and it is able to be handled
		via blockly blocks (run the task)
		mission: 'create-screen' is GUI Editor instance and it is able to be handled
		via blockly blocks as a screen
		etc.
